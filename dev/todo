┏━━━━━━━━━━━━━━━━━━┓
┃ Standard Library ┃
┗━━━━━━━━━━━━━━━━━━┛

  ➤ General

[] Decide on error handling technique. Consider: Windows API (GetLastError), errno, callback functions
[✓] Write the interface for reading and writing to and from serial ports.

  ➤ ctype.h

[✓] isprint()
[✓] iscntrl()
[✓] isgraph()
[✓] isxdigit()
[✓] isblank()
[✓] ispunct()

  ➤ string.h

[✓] Fix [strtoi] so it works with negative numbers.
[✓] strcpy()
[✓] strncpy()
[✓] strcmp()
[] strncmp()
[] strcat()
[] strncat()
[✓] strstr()
[] strrchr()
[] strtok()
[✓] strspn()

  ➤ stdio.h

[✓] Implement [printf] with [_fspec].
[✓] Restore the holy field width padding (for [printf]).
[✓] Add hex, octal and binary support to [printf].
[✓] Add pointer support to [printf].
[✓] Replace [printf] with [vprintf] and write [printf] as a wrapper function for [vprintf].
[✓] Write a [printf] function that accepts a character-printer function.
[✓] Steal the printf implementation from that GitHub repo.


┏━━━━━━━━┓
┃ Kernel ┃
┗━━━━━━━━┛

  ➤ General

[] Write a stivale tag parser and keep the info somewhere.
[✓] Move action-info-printing functions away from the function that handles the actions indirectly.
[] Give limine more tags.
[] Move [kinfoPrintSplash] into a higher level init function and call that from kernel_start.
[] Write an interface for getting the stivale info (after it's been parsed).
[] Give limine a frambuffer header tag.
[✓] Read the stivale2 documentation for the memory map structure tag.
[] Decide on structure of the kernel directory.
[✓] Load IDT table and write some IRQ handlers.
[✓] Handle keyboard interrupts properly.
[✓] Learn how to set up the GDT and do it.
[✓] Clean up integer types in the functions that load the IDT.
[✓] Fix the IDT.
[] Write a basic command prompt.
    [✓] Have a fixed buffer of characters for commands until dynamic memory allocation exists.
    [] Decide on command format. UNIX-style?
    [✓] Render written command again each time it is modified.
    [✓] Support for character deletion
    [✓] Cursor, move with arrow keys
    [] Shell prompt, make it colorful
    [] Parse command, split into tokens
    [] Send command (program name, arguments)
    [] Key combinations for cursor movement
    [] Fix newlines with terminal scrolling.
[✓] Fix exception handlers that use the stack.

  ➤ Devices

[✓] Find out what key does each keyboard interrupt represent.
[✓] Map keycodes to ascii characters.
[✓] Enable Shift and Caps Lock.
[✓] Interface with keyboard at the kernel level.
    [✓] Write another layer of abstraction between [sendKey] and [getchar].
    [✓] Implement [getchar] using state machine information.
    [✓] Should the state machine contain a buffer of characters until linked lists can be implemented?
    [] Add process-specific state machine for implementing functions like [isMetaModifier()]
    [✓] Add support for multibyte keycodes.
        [✓] Add support for two-byte keycodes.
        [✓] Add support for the other keycodes like Pause.
    [✓] Send keyboard signal to use scancode set 1.
    [] Add support for numpad keys.
[] Add support for ANSI sequences in the terminal.

  ➤ Memory

[✓] Set up page frame allocator.
    [✓] Fix allocator algorithm.
    [✓] Use bitmap instead of bytemap.
    [✓] Clear frames as they are being allocated.
[✓] Write virtual memory mapper.
    [✓] Translate the Sabaton zig paging code into C.
    [✓] Fix the false "overlapped mapping" kernel panic that comes up on the second mapping.
    [✓] Fix general protection fault that is raised on the second mapping.
[✓] Fix the triple fault that happens when changing the contents of CR3.
    [✓] Copy limine's default mappings into separate tables.
    [✓] Unmap virtual addresses returned by PMM.
[✓] Get rid of the sign extension function.
[✓] Parse and store stivale memory map.
    [✓] Write interface for getting access to the memory map tag.
[✓] Remove unnecessary assembly functions for enabling bits in control registers.
[✓] Refactor asm paging file.
[✓] Fix PMM to calculate base address dynamically from memory map.
    [✓] Calculate max memory from memory map.
    [✓] Calculate bitmap size based on max memory.
    [✓] Allocate bitmap in the first chunk of usable memory.
[✓] Use PMM to get amount of memory to map in VMM.
[✓] Further refactor file paging.c.
    [✓] Maybe change filename to something more descriptive?
    [✓] Maybe move mapping functions to their own VMM file?

  ➤ Debugging

[✓] Function that logs info about kernel stuff.
[✓] Write interface for logging to QEMU's 0xE9 port.
[] Write interface for logging various debug messages separately from kernel-related logs.
[✓] Learn how to connect GDB to QEMU.
[✓] Rewrite [kinfoLog] so that the status parameter is first and the rest is VA_ARGS for vprintf
[✓] Write breakpoint function that requires the Space key to be pressed to continue.
[] Fix colors of debug messages.
[] Write more general macro for debug message header (possibly more than one macro?).
[] Decide on one or very few debug message header style(s) and stick to them.


┏━━━━━━━━━━━━━┓
┃ Development ┃
┗━━━━━━━━━━━━━┛

  ➤ Code Style

[✓] Decide on pointer binding direction (and actually use it).
[✓] Replace fixed width integer types with normal integer types (for better portability).
[✓] Decide on tabs/spaces.
[] Don't destroy input parameters.
[✓] Consistent naming convention for kernel-related enumerations.
[] Consistent naming convention for libc implementations.
[] Replace tabs with spaces.
[] Put #include <cdefs.h> and extern "C" in all headers.
[✓] Decide on header inclusion order.
[] Decide on hex case.
[✓] Decide on whether or not parameter names show up in header files.
[] Replace tabs in all files with spaces.
[✓] Rename all functions with camelCase.
[] Apply header inclusion order to all files.
[✓] Replace all type_t names with their PascalCase equivalent (you don't wanna mess with POSIX).
[] Apply the "paging.asm" style to all other asm files.

  ➤ Design

[] Find a good diagram drawing program.
[] Maybe draw some diagrams with bindings between files.
[] Minimize the I/O interface that is exposed to the kmain.c file.
[] Find a good web app or VSCode plugin to draw maps of dependencies between files.

  ➤ Structure

[] Move non-standard header files away from the root of the include folder.
[✓] Review kernel folder structure. Move headers into proper folders.


┏━━━━━━━━━━━━━━━┓
┃ Documentation ┃
┗━━━━━━━━━━━━━━━┛

  ➤ General

[] Create documentation directory structure.
[] Decide on documentation format.